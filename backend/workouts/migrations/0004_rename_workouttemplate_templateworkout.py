# Generated by Django 5.2.4 on 2025-08-05 16:07

from django.conf import settings
from django.db import migrations
from django.db.migrations.operations.models import RenameModel


class RenameModelIfExists(RenameModel):
    """RenameModel operation that only renames if the old model exists and new name doesn't."""

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        # Check if old model exists and new model doesn't
        old_model = from_state.apps.get_model(app_label, self.old_name, require_ready=False)
        if old_model is None:
            # Old model doesn't exist, skip
            return

        try:
            new_model = from_state.apps.get_model(app_label, self.new_name, require_ready=False)
            if new_model is not None:
                # New model already exists, skip
                return
        except LookupError:
            pass

        # Proceed with rename
        super().database_forwards(app_label, schema_editor, from_state, to_state)


class Migration(migrations.Migration):

    dependencies = [
        ('workouts', '0003_workouttemplate_templateexercise_templateset_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        RenameModelIfExists(
            old_name='WorkoutTemplate',
            new_name='TemplateWorkout',
        ),
    ]
