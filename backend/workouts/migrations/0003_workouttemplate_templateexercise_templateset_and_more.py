# Generated by Django 5.2.4 on 2025-08-05 16:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.db.migrations.operations.models import CreateModel, AddConstraint


class CreateModelIfNotExists(CreateModel):
    """CreateModel operation that only creates the table if it doesn't exist."""
    
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        model = to_state.apps.get_model(app_label, self.name)
        if not schema_editor.connection.introspection.table_names():
            schema_editor.connection.introspection.table_names()  # refresh
        table_name = model._meta.db_table
        if table_name not in schema_editor.connection.introspection.table_names():
            super().database_forwards(app_label, schema_editor, from_state, to_state)
        # If table exists, skip creation but still update state
        # State is updated by the operation's state_forwards method


class AddConstraintIfNotExists(AddConstraint):
    """AddConstraint operation that only adds the constraint if it doesn't exist."""
    
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        model = from_state.apps.get_model(app_label, self.model_name)
        table_name = model._meta.db_table
        constraint_name = self.constraint.name
        
        # Check if constraint exists (PostgreSQL specific)
        cursor = schema_editor.connection.cursor()
        cursor.execute("""
            SELECT 1 FROM information_schema.table_constraints 
            WHERE constraint_name = %s AND table_name = %s
        """, [constraint_name, table_name])
        
        if not cursor.fetchone():
            # Constraint doesn't exist, add it
            super().database_forwards(app_label, schema_editor, from_state, to_state)
        # If constraint exists, skip but still update state


class Migration(migrations.Migration):

    dependencies = [
        ('workouts', '0002_exercise_unique_exercise_number_per_workout_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        CreateModelIfNotExists(
            name='WorkoutTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_number', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['template_number'],
            },
        ),
        CreateModelIfNotExists(
            name='TemplateExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('exercise_number', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('workout_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='workouts.workouttemplate')),
            ],
            options={
                'ordering': ['exercise_number'],
            },
        ),
        CreateModelIfNotExists(
            name='TemplateSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_number', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sets', to='workouts.templateexercise')),
            ],
            options={
                'ordering': ['set_number'],
                'constraints': [models.UniqueConstraint(fields=('exercise', 'set_number'), name='unique_templateset_set_number_per_exercise')],
            },
        ),
        AddConstraintIfNotExists(
            model_name='workouttemplate',
            constraint=models.UniqueConstraint(fields=('user', 'template_number'), name='unique_template_number_per_user'),
        ),
        AddConstraintIfNotExists(
            model_name='templateexercise',
            constraint=models.UniqueConstraint(fields=('workout_template', 'exercise_number'), name='unique_exercise_number_per_template'),
        ),
    ]
