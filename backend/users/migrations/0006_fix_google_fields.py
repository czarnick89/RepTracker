# Generated by Django 5.2.4 on 2025-10-09 22:46

from django.db import migrations, models


def add_google_fields_if_not_exist(apps, schema_editor):
    """
    Add Google-related fields to User model if they don't already exist.
    This handles the case where the fields might already exist
    from manual database setup or previous migrations.
    """
    db = schema_editor.connection
    table_name = 'users_user'

    # Fields to check and potentially add
    fields_to_add = [
        ('google_access_token', models.TextField(blank=True, null=True)),
        ('google_refresh_token', models.TextField(blank=True, null=True)),
        ('google_token_expiry', models.DateTimeField(blank=True, null=True)),
    ]

    with db.cursor() as cursor:
        db_vendor = db.vendor

        for field_name, field_instance in fields_to_add:
            column_exists = False

            if db_vendor == 'postgresql':
                # Check if column exists in PostgreSQL
                cursor.execute("""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = %s AND column_name = %s
                """, [table_name, field_name])

                if cursor.fetchone():
                    column_exists = True

            elif db_vendor == 'sqlite':
                # Check if column exists in SQLite
                cursor.execute("""
                    PRAGMA table_info(users_user)
                """)
                columns = cursor.fetchall()
                if any(col[1] == field_name for col in columns):
                    column_exists = True

            if not column_exists:
                # Add the field using Django's schema editor
                User = apps.get_model('users', 'User')
                schema_editor.add_field(User, field_instance.clone())


def remove_google_fields_if_exist(apps, schema_editor):
    """
    Remove Google-related fields if they exist (reverse migration).
    """
    db = schema_editor.connection
    table_name = 'users_user'

    # Fields to potentially remove
    fields_to_remove = ['google_access_token', 'google_refresh_token', 'google_token_expiry']

    with db.cursor() as cursor:
        db_vendor = db.vendor

        for field_name in fields_to_remove:
            column_exists = False

            if db_vendor == 'postgresql':
                cursor.execute("""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = %s AND column_name = %s
                """, [table_name, field_name])

                if cursor.fetchone():
                    column_exists = True

            elif db_vendor == 'sqlite':
                cursor.execute("""
                    PRAGMA table_info(users_user)
                """)
                columns = cursor.fetchall()
                if any(col[1] == field_name for col in columns):
                    column_exists = True

            if column_exists:
                # Remove the field
                User = apps.get_model('users', 'User')
                field = User._meta.get_field(field_name)
                schema_editor.remove_field(User, field)


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0005_fix_email_unique_constraint'),
    ]

    operations = [
        migrations.RunPython(
            add_google_fields_if_not_exist,
            remove_google_fields_if_exist
        ),
    ]
