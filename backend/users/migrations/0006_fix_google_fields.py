# Generated by Django 5.2.4 on 2025-10-09 22:46

from django.db import migrations, models


def add_google_fields_safely(apps, schema_editor):
    """
    Add Google fields to User model, but only if they don't already exist.
    Handles both PostgreSQL (production) and SQLite (CI/CD) databases.
    """
    db = schema_editor.connection
    table_name = 'users_user'

    # Fields to potentially add
    fields_to_add = [
        ('google_access_token', 'TEXT'),
        ('google_refresh_token', 'TEXT'),
        ('google_token_expiry', 'TIMESTAMP'),
    ]

    with db.cursor() as cursor:
        for field_name, field_type in fields_to_add:
            column_exists = False

            if db.vendor == 'postgresql':
                # Check if column exists in PostgreSQL
                cursor.execute("""
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name = %s AND column_name = %s
                """, [table_name, field_name])
                column_exists = cursor.fetchone() is not None

            elif db.vendor == 'sqlite':
                # Check if column exists in SQLite
                cursor.execute("PRAGMA table_info(users_user)")
                columns = cursor.fetchall()
                column_exists = any(col[1] == field_name for col in columns)

            if not column_exists:
                # Add the column
                if db.vendor == 'postgresql':
                    if field_type == 'TIMESTAMP':
                        sql = f'ALTER TABLE {table_name} ADD COLUMN {field_name} TIMESTAMP WITH TIME ZONE NULL'
                    else:
                        sql = f'ALTER TABLE {table_name} ADD COLUMN {field_name} {field_type} NULL'
                elif db.vendor == 'sqlite':
                    sql = f'ALTER TABLE {table_name} ADD COLUMN {field_name} {field_type}'

                cursor.execute(sql)


def remove_google_fields_safely(apps, schema_editor):
    """
    Remove Google fields if they exist (reverse migration).
    """
    db = schema_editor.connection
    table_name = 'users_user'
    fields_to_remove = ['google_access_token', 'google_refresh_token', 'google_token_expiry']

    with db.cursor() as cursor:
        for field_name in fields_to_remove:
            column_exists = False

            if db.vendor == 'postgresql':
                cursor.execute("""
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name = %s AND column_name = %s
                """, [table_name, field_name])
                column_exists = cursor.fetchone() is not None

            elif db.vendor == 'sqlite':
                cursor.execute("PRAGMA table_info(users_user)")
                columns = cursor.fetchall()
                column_exists = any(col[1] == field_name for col in columns)

            if column_exists:
                # Remove the column
                sql = f'ALTER TABLE {table_name} DROP COLUMN {field_name}'
                if db.vendor == 'postgresql':
                    sql += ' CASCADE'  # PostgreSQL may need CASCADE
                cursor.execute(sql)


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0005_fix_email_unique_constraint'),
    ]

    operations = [
        migrations.RunPython(
            add_google_fields_safely,
            remove_google_fields_safely
        ),
    ]
