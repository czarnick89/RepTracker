# Generated by Django 5.2.4 on 2025-10-09 22:44

from django.db import migrations


def ensure_email_unique_constraint(apps, schema_editor):
    """
    Ensure the email field has a unique constraint.
    This handles the case where the constraint might already exist
    from manual database setup or previous migrations.
    """
    db = schema_editor.connection
    table_name = 'users_user'

    with db.cursor() as cursor:
        db_vendor = db.vendor

        if db_vendor == 'postgresql':
            # Check if unique constraint already exists on email column
            cursor.execute("""
                SELECT constraint_name
                FROM information_schema.table_constraints
                WHERE table_name = %s
                AND constraint_type = 'UNIQUE'
                AND constraint_name LIKE '%%email%%'
            """, [table_name])

            existing_constraints = cursor.fetchall()

            if not existing_constraints:
                # No unique constraint exists, create one
                cursor.execute("""
                    ALTER TABLE users_user ADD CONSTRAINT users_user_email_unique UNIQUE (email)
                """)
        elif db_vendor == 'sqlite':
            # For SQLite, check if there's a unique index
            cursor.execute("""
                SELECT name FROM sqlite_master
                WHERE type='index' AND tbl_name='users_user' AND name LIKE '%email%' AND sql LIKE '%UNIQUE%'
            """)

            existing_indexes = cursor.fetchall()

            if not existing_indexes:
                # No unique index exists, create one
                cursor.execute("""
                    CREATE UNIQUE INDEX users_user_email_unique ON users_user (email)
                """)


def reverse_ensure_email_unique_constraint(apps, schema_editor):
    """
    Reverse migration - remove the unique constraint if it exists.
    """
    db = schema_editor.connection
    table_name = 'users_user'

    with db.cursor() as cursor:
        db_vendor = db.vendor

        if db_vendor == 'postgresql':
            # Drop the constraint if it exists
            cursor.execute("""
                ALTER TABLE users_user DROP CONSTRAINT IF EXISTS users_user_email_unique
            """)
        elif db_vendor == 'sqlite':
            # Drop the index if it exists
            cursor.execute("""
                DROP INDEX IF EXISTS users_user_email_unique
            """)


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0004_fix_username_migration'),
    ]

    operations = [
        migrations.RunPython(
            ensure_email_unique_constraint,
            reverse_ensure_email_unique_constraint
        ),
    ]
